<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
       default-lazy-init="true">
	
	<!-- 组件扫描 -->
	<context:component-scan base-package="com.easycodebox.example.core,com.easycodebox.idgenerator.service">
		<context:exclude-filter type="annotation"
		                        expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 启用AOP，建议不用加proxy-target-class="true" -->
	<aop:aspectj-autoproxy/>
	<!-- 使用注解事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 导入cache配置 -->
	<import resource="core-cache.xml"/>
	
	<!-- 配置常量 -->
	<bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"
	      p:ignoreResourceNotFound="true">
		<property name="locations">
			<list>
				<value>classpath:core.properties</value>
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
				<value>classpath:url.properties</value>
				<value>classpath:mail.properties</value>
				<value>classpath:login.properties</value>
			</list>
		</property>
		<property name="properties">
			<value>
				code.suc=0
				code.fail=1
				code.no.login=2
			</value>
		</property>
	</bean>
	<!-- ===================================== 【配置文件 - END】  ================================================== -->
	<bean id="placeholder" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
	      p:properties-ref="properties">
		<property name="ignoreResourceNotFound" value="true"/>
	</bean>
	
	<!-- 属性文件的中的配置加载进对应的Bean中 -->
	<bean id="commonProperties" class="com.easycodebox.common.CommonProperties" lazy-init="false"/>
	<bean id="freemarkerProperties" class="com.easycodebox.common.freemarker.FreemarkerProperties" lazy-init="false"/>
	<!-- 把属性文件Bean注册进ServletContext attributes -->
	<bean class="com.easycodebox.common.servlet.ServletContextAttrRegistry" lazy-init="false">
		<property name="nameds">
			<array>
				<ref bean="commonProperties"/>
				<ref bean="freemarkerProperties"/>
			</array>
		</property>
	</bean>
	
	
	<bean id="idGenTypeParser" class="com.easycodebox.common.idgenerator.DetailEnumIdGenTypeParser"
	      c:detailEnumClass="com.easycodebox.example.model.enums.IdGeneratorEnum"/>
	
	<!-- 配置枚举类型工厂 -->
	<bean id="enumClassFactory" class="com.easycodebox.common.enums.EnumClassFactory"
	      lazy-init="false">
		<property name="packagesToScan">
			<list>
				<value>com.easycodebox.example.model.enums</value>
				<value>com.easycodebox.common.enums.entity</value>
			</list>
		</property>
	</bean>
	
	<bean id="annotatedConfig" class="com.easycodebox.jdbc.config.ConfigEntityBean" lazy-init="false">
		<property name="packagesToScan">
			<array>
				<value>com.easycodebox.example.model.entity</value>
				<value>com.easycodebox.idgenerator.entity</value>
			</array>
		</property>
	</bean>
	
	<!-- 数据源配置 -->
	<!--
		initialSize/minIdle/maxActive ==> 配置初始化大小、最小、最大
		maxWait ==> 配置获取连接等待超时的时间
		timeBetweenEvictionRunsMillis ==> 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		minEvictableIdleTimeMillis ==> 配置一个连接在池中最小生存的时间，单位是毫秒
		poolPreparedStatements/maxPoolPreparedStatementPerConnectionSize ==> 打开PSCache，并且指定每个连接上PSCache的大小
		filters ==> 配置监控统计拦截的filters
		connectionProperties ==> config.decrypt用于解密数据库密码
	 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
	      init-method="init" destroy-method="close"
	      p:url="${jdbc.url}"
	      p:username="${jdbc.username}"
	      p:password="${jdbc.password}"
	      p:initialSize="${jdbc.pool.initialSize}"
	      p:minIdle="${jdbc.pool.minIdle}"
	      p:maxActive="${jdbc.pool.maxActive}"
	      p:maxWait="${jdbc.pool.maxWait}"
	      p:timeBetweenEvictionRunsMillis="${jdbc.pool.timeBetweenEvictionRunsMillis}"
	      p:minEvictableIdleTimeMillis="${jdbc.pool.minEvictableIdleTimeMillis}"
	
	      p:validationQuery="${jdbc.pool.validationQuery}"
	      p:testWhileIdle="${jdbc.pool.testWhileIdle}"
	      p:testOnBorrow="${jdbc.pool.testOnBorrow}"
	      p:testOnReturn="${jdbc.pool.testOnReturn}"
	
	      p:poolPreparedStatements="${jdbc.pool.poolPreparedStatements}"
	      p:maxPoolPreparedStatementPerConnectionSize="${jdbc.pool.maxPoolPreparedStatementPerConnectionSize}"
	
	      p:filters="${jdbc.pool.filters}"
	      p:connectionProperties="config.decrypt=true"/>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
	      p:dataSource-ref="dataSource"/>
	
	<!-- 配置MyBatis -->
	<!--
		autoMappingBehavior=FULL : 查询结果支持嵌套属性赋值,默认不支持（PARTIAL）
	-->
	<bean id="ibatisConfiguration" class="com.easycodebox.jdbc.mybatis.DefaultConfiguration"
	      p:lazyLoadingEnabled="false"
	      p:cacheEnabled="false"
	      p:autoMappingBehavior="FULL"/>
	<bean id="detailEnumRegister" class="com.easycodebox.jdbc.mybatis.DynamicTypeHandlerRegister"
	      c:filterClass="com.easycodebox.common.enums.DetailEnum"
	      c:typeHandlerClass="com.easycodebox.jdbc.mybatis.type.DetailEnumTypeHandler">
		<property name="packages">
			<array>
				<value>com.easycodebox.example.model.enums</value>
				<value>com.easycodebox.common.enums.entity</value>
			</array>
		</property>
	</bean>
	<bean id="sqlSessionFactory" class="com.easycodebox.jdbc.mybatis.spring.DefaultSqlSessionFactoryBean"
	      p:dataSource-ref="dataSource"
	      p:configuration-ref="ibatisConfiguration"
	      p:typeAliasesPackage="com.easycodebox.example.model.entity"
	      p:mapperLocations="classpath:CommonMapper.xml"
	      p:dynamicTypeHandlerRegister-ref="detailEnumRegister"/>
	
	<bean id="sqlSessionTemplate" class="com.easycodebox.jdbc.mybatis.spring.DefaultSqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
	      p:basePackage="com.easycodebox.example.core.dao"/>
	<!-- 在insert、update时修改自动设置操作人、操作时间 -->
	<bean id="jdbcHandler" class="com.easycodebox.jdbc.support.DefaultJdbcHandler"/>
	<!-- jdbc处理器，实际处理sql的类 -->
	<bean id="jdbcProcessor" class="com.easycodebox.jdbc.mybatis.MybatisJdbcProcessor"
	      p:sqlSessionTemplate-ref="sqlSessionTemplate"/>
	
	<!-- 持有spring上下文的bean -->
	<bean class="com.easycodebox.common.spring.ApplicationContextFactory"
	      lazy-init="false"/>
	
	<!-- =================================== 【ID转换器 - START】  ============================================== -->
	<bean id="userIdConverter" class="com.easycodebox.example.core.idconverter.DefaultUserIdConverter"
	      c:userWsService-ref="userWsService"
	      p:jdbcHandler-ref="jdbcHandler"/>
	<bean id="idConverterRegistry" class="com.easycodebox.common.idconverter.IdConverterRegistry"
	      p:defaultModule="user">
		<property name="converterMap">
			<map>
				<entry key="user" value-ref="userIdConverter"/>
			</map>
		</property>
	</bean>
	<!-- =================================== 【ID转换器 - END】  ============================================== -->
	
	<!-- =================================== 【security info拦截器 - START】  ============================================== -->
	<bean id="securityFilter" class="com.easycodebox.common.filter.SecurityContextFilter"
	      p:securityInfoHandler-ref="securityInfoHandler"/>
	<!-- =================================== 【security info拦截器 - END】  ============================================== -->
	
	<bean id="conversionService"
	      class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="com.easycodebox.common.spring.StringToEnumConverterFactory"/>
			</set>
		</property>
		<property name="formatters">
			<set>
				<!-- 设置Date类型默认Formatter,全局有效。pattern属性：格式化的默认格式 -->
				<bean class="org.springframework.format.datetime.DateFormatter"
				      p:pattern="yyyy-MM-dd HH:mm:ss"/>
				<!--
						默认情况下FormattingConversionServiceFactoryBean已经注册了DateTimeFormatAnnotationFormatterFactory，
					由registerDefaultFormatters属性控制，此属性默认为true。
						这里再次注册DateTimeFormatAnnotationFormatterFactory的原因如下：
						Spring可以对相同类型转换提供多个Converter，以List形式保存，后添加的Converter会被插入到最前面。而注册
					默认Formatters的行为在上面DateFormatter之前，所以日期类型转换时，只会用上面的DateFormatter，无论你
					有没有在属性上配置@DateTimeFormat注解，Spring都不会使用DateTimeFormatAnnotationFormatterFactory。
						因此这里再次注册了DateTimeFormatAnnotationFormatterFactory，让它第一个检查，如果有@DateTimeFormat则
					用它，没有则使用上面的DateFormatter。这是最简单的方法，不需要写代码就可以实现需求了。
				 -->
				<bean class="org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory"/>
			</set>
		</property>
	</bean>
	
</beans>
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
	default-lazy-init="true">

	<!-- 注解 -->
	<context:annotation-config />
	<!-- 组件扫描 -->
	<context:component-scan base-package="com.easycodebox">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 启用AOP，建议不用加proxy-target-class="true" -->
	<aop:aspectj-autoproxy />
	<!-- 使用注解事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 导入cache配置 -->
	<import resource="core-cache.xml" />
	
	<!-- 配置常量 -->
	<bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"
		p:ignoreResourceNotFound="true">
		<property name="locations">
			<list>
				<value>classpath:core.properties</value>
				<value>classpath:jdbc.properties</value>
				<value>classpath:url.properties</value>
				<value>classpath:mail.properties</value>
				<value>classpath:login.properties</value>
			</list>
		</property>
	</bean>
	<!-- ===================================== 【配置文件 - END】  ================================================== -->
	<!-- 计算属性值中的值引用。例：cas.login=${cas.url}/login -->
	<bean id="exePropertyPlaceholder" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"
		depends-on="properties" lazy-init="false"
		p:targetClass="com.easycodebox.common.file.PropertiesUtils"
		p:targetMethod="processPlaceholder">
		<property name="arguments">
			<array>
				<ref bean="properties"/>
				<value>true</value>
			</array>
		</property>
	</bean>
	<!-- 处理类的静态变量 ，当properties文件中没有配置值且Class类中已初始化，则值会反刷进properties中 -->
	<bean id="staticValueProcessor" class="com.easycodebox.common.processor.StaticValueProcessor" 
		init-method="process" lazy-init="false" depends-on="exePropertyPlaceholder">
		<property name="properties" ref="properties" />
		<property name="packagesToScan">
			<list>
				<value>com.easycodebox.example.model.bo</value>
			</list>
		</property>
		<property name="classes">
			<list>
				<value>com.easycodebox.example.core.util.Constants</value>
				<value>com.easycodebox.common.freemarker.ConfigurationFactory</value>
			</list>
		</property>
	</bean>
	<bean id="placeholder" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		depends-on="staticValueProcessor"
		p:properties-ref="properties">
		<property name="ignoreResourceNotFound" value="true" />
	</bean>
	<!-- 属性刷到PropertiesPool中 -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"
		depends-on="staticValueProcessor"
		p:targetClass="com.easycodebox.common.file.PropertiesPool"
		p:targetMethod="addProperties"
		p:arguments-ref="properties" />
	
	<!-- 配置枚举类型工厂 -->
	<bean id="enumClassFactory" class="com.easycodebox.common.enums.EnumClassFactory"
		lazy-init="false">
		<property name="packagesToScan">
			<list>
				<value>com.easycodebox.example.model.enums</value>
				<value>com.easycodebox.example.model.util.mybatis</value>
				<value>com.easycodebox.common.enums.entity</value>
			</list>
		</property>
	</bean>

	<bean id="annotatedConfig" class="com.easycodebox.jdbc.config.ConfigEntityBean"
		lazy-init="false" p:packagesToScan="com.easycodebox.example.model.entity" />

	<!-- 数据源配置 -->
	<!--
		initialSize/minIdle/maxActive ==> 配置初始化大小、最小、最大
		maxWait ==> 配置获取连接等待超时的时间
		timeBetweenEvictionRunsMillis ==> 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		minEvictableIdleTimeMillis ==> 配置一个连接在池中最小生存的时间，单位是毫秒
		poolPreparedStatements/maxPoolPreparedStatementPerConnectionSize ==> 打开PSCache，并且指定每个连接上PSCache的大小
		filters ==> 配置监控统计拦截的filters
		connectionProperties ==> config.decrypt用于解密数据库密码
	 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close"
		p:url="${jdbc.url}"
		p:username="${jdbc.username}"
		p:password="${jdbc.password}"
		p:initialSize="${pool.initialSize}"
		p:minIdle="${pool.minIdle}"
		p:maxActive="${pool.maxActive}"
		p:maxWait="${pool.maxWait}"
		p:timeBetweenEvictionRunsMillis="${pool.timeBetweenEvictionRunsMillis}"
		p:minEvictableIdleTimeMillis="${pool.minEvictableIdleTimeMillis}"
		
		p:validationQuery="${pool.validationQuery}"
		p:testWhileIdle="${pool.testWhileIdle}"
		p:testOnBorrow="${pool.testOnBorrow}"
		p:testOnReturn="${pool.testOnReturn}"
		
		p:poolPreparedStatements="${pool.poolPreparedStatements}"
		p:maxPoolPreparedStatementPerConnectionSize="${pool.maxPoolPreparedStatementPerConnectionSize}"
		
		p:filters="${pool.filters}"
		p:connectionProperties="config.decrypt=true" />

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	
	<!-- 配置MyBatis -->
	<!--
		autoMappingBehavior=FULL : 查询结果支持嵌套属性赋值,默认不支持（PARTIAL）
	-->
	<bean id="ibatisConfiguration" class="com.easycodebox.jdbc.mybatis.DefaultConfiguration"
	      p:lazyLoadingEnabled="false"
	      p:cacheEnabled="false"
	      p:autoMappingBehavior="FULL"/>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
	      p:dataSource-ref="dataSource"
	      p:configuration-ref="ibatisConfiguration"
	      p:typeAliasesPackage="com.easycodebox.auth.model.entity"
	      p:typeHandlersPackage="com.easycodebox.auth.model.util.mybatis"
	      p:mapperLocations="classpath:CommonMapper.xml"/>

	<bean id="sqlSessionTemplate" class="com.easycodebox.jdbc.mybatis.spring.DefaultSqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="com.easycodebox.example.core.dao" />
	<!-- 在insert、update时修改自动设置操作人、操作时间 -->
	<bean id="jdbcHandler" class="com.easycodebox.jdbc.support.DefaultJdbcHandler" />
	<!-- jdbc处理器，实际处理sql的类 -->
	<bean id="jdbcProcessor" class="com.easycodebox.jdbc.mybatis.MybatisJdbcProcessor"
		p:sqlSessionTemplate-ref="sqlSessionTemplate" />

	<!-- 持有spring上下文的bean -->
	<bean class="com.easycodebox.common.spring.ApplicationContextFactory"
		lazy-init="false" />

	<!-- =================================== 【ID转换器 - START】  ============================================== -->
	<bean id="userIdConverter" class="com.easycodebox.example.core.idconverter.UserIdConverter"
		c:userWsService-ref="userWsService"
		p:jdbcHandler-ref="jdbcHandler"/>
	<bean id="idConverterRegistry" class="com.easycodebox.common.idconverter.IdConverterRegistry"
		p:defaultModule="user">
		<property name="converterMap">
			<map>
				<entry key="user" value-ref="userIdConverter" />
			</map>
		</property>
	</bean>
	<!-- =================================== 【ID转换器 - END】  ============================================== -->
	
	<!-- =================================== 【security info拦截器 - START】  ============================================== -->
	<bean id="securityFilter" class="com.easycodebox.common.filter.SecurityContextFilter"
		p:securityInfoHandler-ref="securityInfoHandler" />
	<!-- =================================== 【security info拦截器 - END】  ============================================== -->
	
</beans>